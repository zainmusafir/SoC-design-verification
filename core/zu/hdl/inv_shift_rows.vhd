-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.3
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity inv_shift_rows is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    state_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    state_ce0 : OUT STD_LOGIC;
    state_we0 : OUT STD_LOGIC;
    state_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    state_q0 : IN STD_LOGIC_VECTOR (7 downto 0) );
end;


architecture behav of inv_shift_rows is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (5 downto 0) := "000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (5 downto 0) := "000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (5 downto 0) := "001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (5 downto 0) := "010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv4_3 : STD_LOGIC_VECTOR (3 downto 0) := "0011";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal indvars_iv_cast_fu_95_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal indvars_iv_cast_reg_190 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tmp_6_fu_105_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_6_reg_198 : STD_LOGIC_VECTOR (1 downto 0);
    signal exitcond1_fu_99_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal state_addr_reg_204 : STD_LOGIC_VECTOR (3 downto 0);
    signal state_addr_1_reg_209 : STD_LOGIC_VECTOR (3 downto 0);
    signal s_1_fu_142_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal s_1_reg_217 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal i_fu_148_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal exitcond_fu_137_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_reg_227 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal k_1_fu_160_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal k_1_reg_235 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal tmp_5_fu_154_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal indvars_iv_reg_60 : STD_LOGIC_VECTOR (2 downto 0);
    signal s_reg_72 : STD_LOGIC_VECTOR (1 downto 0);
    signal k_reg_83 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal tmp_3_fu_123_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_4_fu_128_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_8_fu_173_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_1_fu_185_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_s_fu_109_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_2_fu_117_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal s_cast_fu_133_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_9_fu_166_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_7_fu_178_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (5 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    indvars_iv_reg_60_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                indvars_iv_reg_60 <= ap_const_lv3_1;
            elsif (((exitcond_fu_137_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                indvars_iv_reg_60 <= i_fu_148_p2;
            end if; 
        end if;
    end process;

    k_reg_83_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                k_reg_83 <= k_1_reg_235;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                k_reg_83 <= ap_const_lv2_3;
            end if; 
        end if;
    end process;

    s_reg_72_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond1_fu_99_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                s_reg_72 <= ap_const_lv2_0;
            elsif (((tmp_5_fu_154_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                s_reg_72 <= s_1_reg_217;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                    indvars_iv_cast_reg_190(2 downto 0) <= indvars_iv_cast_fu_95_p1(2 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_5_fu_154_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                k_1_reg_235 <= k_1_fu_160_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                s_1_reg_217 <= s_1_fu_142_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond1_fu_99_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    state_addr_1_reg_209(3 downto 2) <= tmp_4_fu_128_p1(4 - 1 downto 0)(3 downto 2);
                    state_addr_reg_204(3 downto 2) <= tmp_3_fu_123_p1(4 - 1 downto 0)(3 downto 2);
                tmp_6_reg_198 <= tmp_6_fu_105_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                tmp_reg_227 <= state_q0;
            end if;
        end if;
    end process;
    indvars_iv_cast_reg_190(3) <= '0';
    state_addr_reg_204(1 downto 0) <= "11";
    state_addr_1_reg_209(1 downto 0) <= "00";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, exitcond1_fu_99_p2, ap_CS_fsm_state3, exitcond_fu_137_p2, ap_CS_fsm_state5, tmp_5_fu_154_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((exitcond1_fu_99_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((exitcond_fu_137_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                if (((tmp_5_fu_154_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when others =>  
                ap_NS_fsm <= "XXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, exitcond1_fu_99_p2)
    begin
        if ((((exitcond1_fu_99_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, exitcond1_fu_99_p2)
    begin
        if (((exitcond1_fu_99_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    exitcond1_fu_99_p2 <= "1" when (indvars_iv_reg_60 = ap_const_lv3_4) else "0";
    exitcond_fu_137_p2 <= "1" when (s_cast_fu_133_p1 = indvars_iv_cast_reg_190) else "0";
    i_fu_148_p2 <= std_logic_vector(unsigned(indvars_iv_reg_60) + unsigned(ap_const_lv3_1));
    indvars_iv_cast_fu_95_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(indvars_iv_reg_60),4));
    k_1_fu_160_p2 <= std_logic_vector(unsigned(k_reg_83) + unsigned(ap_const_lv2_3));
    s_1_fu_142_p2 <= std_logic_vector(unsigned(s_reg_72) + unsigned(ap_const_lv2_1));
    s_cast_fu_133_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(s_reg_72),4));

    state_address0_assign_proc : process(state_addr_reg_204, state_addr_1_reg_209, ap_CS_fsm_state3, ap_CS_fsm_state5, tmp_5_fu_154_p2, ap_CS_fsm_state6, tmp_8_fu_173_p1, tmp_1_fu_185_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            state_address0 <= tmp_1_fu_185_p1(4 - 1 downto 0);
        elsif (((tmp_5_fu_154_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            state_address0 <= state_addr_1_reg_209;
        elsif (((tmp_5_fu_154_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            state_address0 <= tmp_8_fu_173_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            state_address0 <= state_addr_reg_204;
        else 
            state_address0 <= "XXXX";
        end if; 
    end process;


    state_ce0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state5, tmp_5_fu_154_p2, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state3) or ((tmp_5_fu_154_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5)) or ((tmp_5_fu_154_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5)))) then 
            state_ce0 <= ap_const_logic_1;
        else 
            state_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    state_d0_assign_proc : process(state_q0, tmp_reg_227, ap_CS_fsm_state5, tmp_5_fu_154_p2, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            state_d0 <= state_q0;
        elsif (((tmp_5_fu_154_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            state_d0 <= tmp_reg_227;
        else 
            state_d0 <= "XXXXXXXX";
        end if; 
    end process;


    state_we0_assign_proc : process(ap_CS_fsm_state5, tmp_5_fu_154_p2, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or ((tmp_5_fu_154_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5)))) then 
            state_we0 <= ap_const_logic_1;
        else 
            state_we0 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_1_fu_185_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_7_fu_178_p3),64));
    tmp_2_fu_117_p2 <= (tmp_s_fu_109_p3 or ap_const_lv4_3);
    tmp_3_fu_123_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_2_fu_117_p2),64));
    tmp_4_fu_128_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_fu_109_p3),64));
    tmp_5_fu_154_p2 <= "1" when (k_reg_83 = ap_const_lv2_0) else "0";
    tmp_6_fu_105_p1 <= indvars_iv_reg_60(2 - 1 downto 0);
    tmp_7_fu_178_p3 <= (tmp_6_reg_198 & k_reg_83);
    tmp_8_fu_173_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_9_fu_166_p3),64));
    tmp_9_fu_166_p3 <= (tmp_6_reg_198 & k_1_fu_160_p2);
    tmp_s_fu_109_p3 <= (tmp_6_fu_105_p1 & ap_const_lv2_0);
end behav;
