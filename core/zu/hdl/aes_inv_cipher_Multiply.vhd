-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Version: 2020.2
-- Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity aes_inv_cipher_Multiply is
port (
    ap_ready : OUT STD_LOGIC;
    x : IN STD_LOGIC_VECTOR (7 downto 0);
    y : IN STD_LOGIC_VECTOR (2 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (7 downto 0) );
end;


architecture behav of aes_inv_cipher_Multiply is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv8_1B : STD_LOGIC_VECTOR (7 downto 0) := "00011011";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_logic_0 : STD_LOGIC := '0';

attribute shreg_extract : string;
    signal empty_fu_38_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln92_fu_42_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_2_fu_70_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln87_fu_78_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal shl_ln87_fu_64_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_fu_56_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln87_fu_86_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln92_1_fu_92_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_4_fu_120_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln87_1_fu_128_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal shl_ln87_1_fu_114_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_3_fu_106_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln87_1_fu_136_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln92_2_fu_142_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_5_fu_162_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln87_2_fu_170_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal shl_ln87_2_fu_156_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal and_ln92_1_fu_100_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal and_ln92_fu_50_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln87_2_fu_178_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal and_ln92_2_fu_150_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln92_1_fu_190_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln92_fu_184_p2 : STD_LOGIC_VECTOR (7 downto 0);


begin



    and_ln92_1_fu_100_p2 <= (xor_ln87_fu_86_p2 and select_ln92_1_fu_92_p3);
    and_ln92_2_fu_150_p2 <= (xor_ln87_1_fu_136_p2 and select_ln92_2_fu_142_p3);
    and_ln92_fu_50_p2 <= (x and select_ln92_fu_42_p3);
    ap_ready <= ap_const_logic_1;
    ap_return <= (xor_ln92_fu_184_p2 xor xor_ln92_1_fu_190_p2);
    empty_fu_38_p1 <= y(1 - 1 downto 0);
    select_ln87_1_fu_128_p3 <= 
        ap_const_lv8_1B when (tmp_4_fu_120_p3(0) = '1') else 
        ap_const_lv8_0;
    select_ln87_2_fu_170_p3 <= 
        ap_const_lv8_1B when (tmp_5_fu_162_p3(0) = '1') else 
        ap_const_lv8_0;
    select_ln87_fu_78_p3 <= 
        ap_const_lv8_1B when (tmp_2_fu_70_p3(0) = '1') else 
        ap_const_lv8_0;
    select_ln92_1_fu_92_p3 <= 
        ap_const_lv8_FF when (tmp_fu_56_p3(0) = '1') else 
        ap_const_lv8_0;
    select_ln92_2_fu_142_p3 <= 
        ap_const_lv8_FF when (tmp_3_fu_106_p3(0) = '1') else 
        ap_const_lv8_0;
    select_ln92_fu_42_p3 <= 
        ap_const_lv8_FF when (empty_fu_38_p1(0) = '1') else 
        ap_const_lv8_0;
    shl_ln87_1_fu_114_p2 <= std_logic_vector(shift_left(unsigned(xor_ln87_fu_86_p2),to_integer(unsigned('0' & ap_const_lv8_1(8-1 downto 0)))));
    shl_ln87_2_fu_156_p2 <= std_logic_vector(shift_left(unsigned(xor_ln87_1_fu_136_p2),to_integer(unsigned('0' & ap_const_lv8_1(8-1 downto 0)))));
    shl_ln87_fu_64_p2 <= std_logic_vector(shift_left(unsigned(x),to_integer(unsigned('0' & ap_const_lv8_1(8-1 downto 0)))));
    tmp_2_fu_70_p3 <= x(7 downto 7);
    tmp_3_fu_106_p3 <= y(2 downto 2);
    tmp_4_fu_120_p3 <= xor_ln87_fu_86_p2(7 downto 7);
    tmp_5_fu_162_p3 <= xor_ln87_1_fu_136_p2(7 downto 7);
    tmp_fu_56_p3 <= y(1 downto 1);
    xor_ln87_1_fu_136_p2 <= (shl_ln87_1_fu_114_p2 xor select_ln87_1_fu_128_p3);
    xor_ln87_2_fu_178_p2 <= (shl_ln87_2_fu_156_p2 xor select_ln87_2_fu_170_p3);
    xor_ln87_fu_86_p2 <= (shl_ln87_fu_64_p2 xor select_ln87_fu_78_p3);
    xor_ln92_1_fu_190_p2 <= (xor_ln87_2_fu_178_p2 xor and_ln92_2_fu_150_p2);
    xor_ln92_fu_184_p2 <= (and_ln92_fu_50_p2 xor and_ln92_1_fu_100_p2);
end behav;
