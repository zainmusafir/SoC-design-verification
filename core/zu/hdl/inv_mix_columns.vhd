-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.3
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity inv_mix_columns is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    state_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    state_ce0 : OUT STD_LOGIC;
    state_we0 : OUT STD_LOGIC;
    state_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    state_q0 : IN STD_LOGIC_VECTOR (7 downto 0) );
end;


architecture behav of inv_mix_columns is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (12 downto 0) := "0000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (12 downto 0) := "0000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (12 downto 0) := "0000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (12 downto 0) := "0000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (12 downto 0) := "0000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (12 downto 0) := "0000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (12 downto 0) := "0001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (12 downto 0) := "0010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (12 downto 0) := "0100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (12 downto 0) := "1000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv4_2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_const_lv4_3 : STD_LOGIC_VECTOR (3 downto 0) := "0011";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (12 downto 0) := "0000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal reg_285 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tmp_s_fu_317_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal tmp_21_1_fu_442_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal tmp_21_2_fu_579_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal tmp_21_3_fu_700_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal reg_289 : STD_LOGIC_VECTOR (7 downto 0);
    signal reg_293 : STD_LOGIC_VECTOR (7 downto 0);
    signal reg_297 : STD_LOGIC_VECTOR (7 downto 0);
    signal col_3_load_reg_845 : STD_LOGIC_VECTOR (7 downto 0);
    signal col_3_1_load_reg_850 : STD_LOGIC_VECTOR (7 downto 0);
    signal col_3_2_load_reg_855 : STD_LOGIC_VECTOR (7 downto 0);
    signal col_3_3_load_reg_860 : STD_LOGIC_VECTOR (7 downto 0);
    signal i_2_fu_323_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_2_reg_868 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_19_fu_329_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_19_reg_873 : STD_LOGIC_VECTOR (1 downto 0);
    signal i_3_fu_372_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal col_3_5_load_reg_918 : STD_LOGIC_VECTOR (7 downto 0);
    signal col_3_6_load_reg_923 : STD_LOGIC_VECTOR (7 downto 0);
    signal col_3_7_load_reg_928 : STD_LOGIC_VECTOR (7 downto 0);
    signal col_3_8_load_reg_933 : STD_LOGIC_VECTOR (7 downto 0);
    signal i_2_1_fu_448_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_2_1_reg_941 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_21_fu_454_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_21_reg_946 : STD_LOGIC_VECTOR (1 downto 0);
    signal i_3_1_fu_503_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal col_3_10_load_reg_991 : STD_LOGIC_VECTOR (7 downto 0);
    signal col_3_11_load_reg_996 : STD_LOGIC_VECTOR (7 downto 0);
    signal col_3_12_load_reg_1001 : STD_LOGIC_VECTOR (7 downto 0);
    signal col_3_13_load_reg_1006 : STD_LOGIC_VECTOR (7 downto 0);
    signal i_2_2_fu_585_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_2_2_reg_1014 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_23_fu_591_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_23_reg_1019 : STD_LOGIC_VECTOR (1 downto 0);
    signal i_3_2_fu_640_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal i_2_3_fu_706_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_2_3_reg_1067 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_25_fu_712_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_25_reg_1072 : STD_LOGIC_VECTOR (1 downto 0);
    signal i_3_3_fu_777_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal grp_coef_mult_int_fu_261_ap_ready : STD_LOGIC;
    signal grp_coef_mult_int_fu_261_a_0_read : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_coef_mult_int_fu_261_a_1_read : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_coef_mult_int_fu_261_a_2_read : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_coef_mult_int_fu_261_a_3_read : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_coef_mult_int_fu_261_ap_return_0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_coef_mult_int_fu_261_ap_return_1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_coef_mult_int_fu_261_ap_return_2 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_coef_mult_int_fu_261_ap_return_3 : STD_LOGIC_VECTOR (7 downto 0);
    signal i_reg_173 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal i_1_reg_184 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_4_fu_366_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_s_reg_195 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal i_1_1_reg_206 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_27_1_fu_497_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_4_reg_217 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal i_1_2_reg_228 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_27_2_fu_634_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_5_reg_239 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal i_1_3_reg_250 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_27_3_fu_771_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_3_fu_341_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_6_fu_405_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_25_1_fu_472_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_32_1_fu_542_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_25_2_fu_609_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_32_2_fu_679_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_25_3_fu_730_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_32_3_fu_816_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal col_3_fu_40 : STD_LOGIC_VECTOR (7 downto 0);
    signal col_3_1_fu_44 : STD_LOGIC_VECTOR (7 downto 0);
    signal col_3_2_fu_48 : STD_LOGIC_VECTOR (7 downto 0);
    signal col_3_3_fu_52 : STD_LOGIC_VECTOR (7 downto 0);
    signal col_3_5_fu_56 : STD_LOGIC_VECTOR (7 downto 0);
    signal col_3_6_fu_60 : STD_LOGIC_VECTOR (7 downto 0);
    signal col_3_7_fu_64 : STD_LOGIC_VECTOR (7 downto 0);
    signal col_3_8_fu_68 : STD_LOGIC_VECTOR (7 downto 0);
    signal col_3_10_fu_72 : STD_LOGIC_VECTOR (7 downto 0);
    signal col_3_11_fu_76 : STD_LOGIC_VECTOR (7 downto 0);
    signal col_3_12_fu_80 : STD_LOGIC_VECTOR (7 downto 0);
    signal col_3_13_fu_84 : STD_LOGIC_VECTOR (7 downto 0);
    signal col_3_15_fu_88 : STD_LOGIC_VECTOR (7 downto 0);
    signal col_3_16_fu_92 : STD_LOGIC_VECTOR (7 downto 0);
    signal col_3_17_fu_96 : STD_LOGIC_VECTOR (7 downto 0);
    signal col_3_18_fu_100 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_7_fu_382_p6 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_8_fu_513_p6 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_10_fu_650_p6 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_13_fu_787_p6 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_2_fu_333_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_20_fu_378_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_5_fu_397_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_23_1_fu_458_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_24_s_fu_466_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_22_fu_509_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_30_1_fu_528_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_31_s_fu_536_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_23_2_fu_595_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_24_1_fu_603_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_24_fu_646_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_30_2_fu_665_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_31_1_fu_673_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_23_3_fu_716_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_24_2_fu_724_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_26_fu_783_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_30_3_fu_802_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_31_2_fu_810_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (12 downto 0);

    component coef_mult_int IS
    port (
        ap_ready : OUT STD_LOGIC;
        a_0_read : IN STD_LOGIC_VECTOR (7 downto 0);
        a_1_read : IN STD_LOGIC_VECTOR (7 downto 0);
        a_2_read : IN STD_LOGIC_VECTOR (7 downto 0);
        a_3_read : IN STD_LOGIC_VECTOR (7 downto 0);
        ap_return_0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        ap_return_1 : OUT STD_LOGIC_VECTOR (7 downto 0);
        ap_return_2 : OUT STD_LOGIC_VECTOR (7 downto 0);
        ap_return_3 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component aes_inv_cipher_mux_42_8_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (7 downto 0);
        din3 : IN STD_LOGIC_VECTOR (7 downto 0);
        din4 : IN STD_LOGIC_VECTOR (1 downto 0);
        dout : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;



begin
    grp_coef_mult_int_fu_261 : component coef_mult_int
    port map (
        ap_ready => grp_coef_mult_int_fu_261_ap_ready,
        a_0_read => grp_coef_mult_int_fu_261_a_0_read,
        a_1_read => grp_coef_mult_int_fu_261_a_1_read,
        a_2_read => grp_coef_mult_int_fu_261_a_2_read,
        a_3_read => grp_coef_mult_int_fu_261_a_3_read,
        ap_return_0 => grp_coef_mult_int_fu_261_ap_return_0,
        ap_return_1 => grp_coef_mult_int_fu_261_ap_return_1,
        ap_return_2 => grp_coef_mult_int_fu_261_ap_return_2,
        ap_return_3 => grp_coef_mult_int_fu_261_ap_return_3);

    aes_inv_cipher_mux_42_8_1_1_U13 : component aes_inv_cipher_mux_42_8_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        din3_WIDTH => 8,
        din4_WIDTH => 2,
        dout_WIDTH => 8)
    port map (
        din0 => reg_285,
        din1 => reg_289,
        din2 => reg_293,
        din3 => reg_297,
        din4 => tmp_20_fu_378_p1,
        dout => tmp_7_fu_382_p6);

    aes_inv_cipher_mux_42_8_1_1_U14 : component aes_inv_cipher_mux_42_8_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        din3_WIDTH => 8,
        din4_WIDTH => 2,
        dout_WIDTH => 8)
    port map (
        din0 => reg_285,
        din1 => reg_289,
        din2 => reg_293,
        din3 => reg_297,
        din4 => tmp_22_fu_509_p1,
        dout => tmp_8_fu_513_p6);

    aes_inv_cipher_mux_42_8_1_1_U15 : component aes_inv_cipher_mux_42_8_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        din3_WIDTH => 8,
        din4_WIDTH => 2,
        dout_WIDTH => 8)
    port map (
        din0 => reg_285,
        din1 => reg_289,
        din2 => reg_293,
        din3 => reg_297,
        din4 => tmp_24_fu_646_p1,
        dout => tmp_10_fu_650_p6);

    aes_inv_cipher_mux_42_8_1_1_U16 : component aes_inv_cipher_mux_42_8_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        din3_WIDTH => 8,
        din4_WIDTH => 2,
        dout_WIDTH => 8)
    port map (
        din0 => reg_285,
        din1 => reg_289,
        din2 => reg_293,
        din3 => reg_297,
        din4 => tmp_26_fu_783_p1,
        dout => tmp_13_fu_787_p6);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    col_3_10_fu_72_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state9) and (tmp_23_reg_1019 = ap_const_lv2_0))) then 
                col_3_10_fu_72 <= state_q0;
            elsif (((tmp_27_1_fu_497_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
                col_3_10_fu_72 <= col_3_5_load_reg_918;
            end if; 
        end if;
    end process;

    col_3_11_fu_76_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state9) and (tmp_23_reg_1019 = ap_const_lv2_1))) then 
                col_3_11_fu_76 <= state_q0;
            elsif (((tmp_27_1_fu_497_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
                col_3_11_fu_76 <= col_3_6_load_reg_923;
            end if; 
        end if;
    end process;

    col_3_12_fu_80_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state9) and (tmp_23_reg_1019 = ap_const_lv2_2))) then 
                col_3_12_fu_80 <= state_q0;
            elsif (((tmp_27_1_fu_497_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
                col_3_12_fu_80 <= col_3_7_load_reg_928;
            end if; 
        end if;
    end process;

    col_3_13_fu_84_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state9) and (tmp_23_reg_1019 = ap_const_lv2_3))) then 
                col_3_13_fu_84 <= state_q0;
            elsif (((tmp_27_1_fu_497_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
                col_3_13_fu_84 <= col_3_8_load_reg_933;
            end if; 
        end if;
    end process;

    col_3_15_fu_88_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state12) and (tmp_25_reg_1072 = ap_const_lv2_0))) then 
                col_3_15_fu_88 <= state_q0;
            elsif (((tmp_27_2_fu_634_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then 
                col_3_15_fu_88 <= col_3_10_load_reg_991;
            end if; 
        end if;
    end process;

    col_3_16_fu_92_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state12) and (tmp_25_reg_1072 = ap_const_lv2_1))) then 
                col_3_16_fu_92 <= state_q0;
            elsif (((tmp_27_2_fu_634_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then 
                col_3_16_fu_92 <= col_3_11_load_reg_996;
            end if; 
        end if;
    end process;

    col_3_17_fu_96_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state12) and (tmp_25_reg_1072 = ap_const_lv2_2))) then 
                col_3_17_fu_96 <= state_q0;
            elsif (((tmp_27_2_fu_634_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then 
                col_3_17_fu_96 <= col_3_12_load_reg_1001;
            end if; 
        end if;
    end process;

    col_3_18_fu_100_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state12) and (tmp_25_reg_1072 = ap_const_lv2_3))) then 
                col_3_18_fu_100 <= state_q0;
            elsif (((tmp_27_2_fu_634_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then 
                col_3_18_fu_100 <= col_3_13_load_reg_1006;
            end if; 
        end if;
    end process;

    col_3_5_fu_56_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (tmp_21_reg_946 = ap_const_lv2_0))) then 
                col_3_5_fu_56 <= state_q0;
            elsif (((tmp_4_fu_366_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                col_3_5_fu_56 <= col_3_load_reg_845;
            end if; 
        end if;
    end process;

    col_3_6_fu_60_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (tmp_21_reg_946 = ap_const_lv2_1))) then 
                col_3_6_fu_60 <= state_q0;
            elsif (((tmp_4_fu_366_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                col_3_6_fu_60 <= col_3_1_load_reg_850;
            end if; 
        end if;
    end process;

    col_3_7_fu_64_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (tmp_21_reg_946 = ap_const_lv2_2))) then 
                col_3_7_fu_64 <= state_q0;
            elsif (((tmp_4_fu_366_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                col_3_7_fu_64 <= col_3_2_load_reg_855;
            end if; 
        end if;
    end process;

    col_3_8_fu_68_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (tmp_21_reg_946 = ap_const_lv2_3))) then 
                col_3_8_fu_68 <= state_q0;
            elsif (((tmp_4_fu_366_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                col_3_8_fu_68 <= col_3_3_load_reg_860;
            end if; 
        end if;
    end process;

    i_1_1_reg_206_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_27_1_fu_497_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
                i_1_1_reg_206 <= i_3_1_fu_503_p2;
            elsif (((tmp_21_1_fu_442_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                i_1_1_reg_206 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    i_1_2_reg_228_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_27_2_fu_634_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state10))) then 
                i_1_2_reg_228 <= i_3_2_fu_640_p2;
            elsif (((tmp_21_2_fu_579_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
                i_1_2_reg_228 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    i_1_3_reg_250_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_27_3_fu_771_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state13))) then 
                i_1_3_reg_250 <= i_3_3_fu_777_p2;
            elsif (((tmp_21_3_fu_700_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state11))) then 
                i_1_3_reg_250 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    i_1_reg_184_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_4_fu_366_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                i_1_reg_184 <= i_3_fu_372_p2;
            elsif (((tmp_s_fu_317_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                i_1_reg_184 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    i_4_reg_217_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                i_4_reg_217 <= i_2_2_reg_1014;
            elsif (((tmp_27_1_fu_497_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
                i_4_reg_217 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    i_5_reg_239_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
                i_5_reg_239 <= i_2_3_reg_1067;
            elsif (((tmp_27_2_fu_634_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then 
                i_5_reg_239 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    i_reg_173_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                i_reg_173 <= i_2_reg_868;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                i_reg_173 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    i_s_reg_195_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                i_s_reg_195 <= i_2_1_reg_941;
            elsif (((tmp_4_fu_366_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                i_s_reg_195 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                col_3_10_load_reg_991 <= col_3_10_fu_72;
                col_3_11_load_reg_996 <= col_3_11_fu_76;
                col_3_12_load_reg_1001 <= col_3_12_fu_80;
                col_3_13_load_reg_1006 <= col_3_13_fu_84;
                i_2_2_reg_1014 <= i_2_2_fu_585_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_19_reg_873 = ap_const_lv2_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                col_3_1_fu_44 <= state_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                col_3_1_load_reg_850 <= col_3_1_fu_44;
                col_3_2_load_reg_855 <= col_3_2_fu_48;
                col_3_3_load_reg_860 <= col_3_3_fu_52;
                col_3_load_reg_845 <= col_3_fu_40;
                i_2_reg_868 <= i_2_fu_323_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_19_reg_873 = ap_const_lv2_2) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                col_3_2_fu_48 <= state_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_19_reg_873 = ap_const_lv2_3) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                col_3_3_fu_52 <= state_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                col_3_5_load_reg_918 <= col_3_5_fu_56;
                col_3_6_load_reg_923 <= col_3_6_fu_60;
                col_3_7_load_reg_928 <= col_3_7_fu_64;
                col_3_8_load_reg_933 <= col_3_8_fu_68;
                i_2_1_reg_941 <= i_2_1_fu_448_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_19_reg_873 = ap_const_lv2_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                col_3_fu_40 <= state_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then
                i_2_3_reg_1067 <= i_2_3_fu_706_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((tmp_21_3_fu_700_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state11)) or ((tmp_21_2_fu_579_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state8)) or ((tmp_21_1_fu_442_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5)) or ((tmp_s_fu_317_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then
                reg_285 <= grp_coef_mult_int_fu_261_ap_return_0;
                reg_289 <= grp_coef_mult_int_fu_261_ap_return_1;
                reg_293 <= grp_coef_mult_int_fu_261_ap_return_2;
                reg_297 <= grp_coef_mult_int_fu_261_ap_return_3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_s_fu_317_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                tmp_19_reg_873 <= tmp_19_fu_329_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_21_1_fu_442_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                tmp_21_reg_946 <= tmp_21_fu_454_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_21_2_fu_579_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state8))) then
                tmp_23_reg_1019 <= tmp_23_fu_591_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_21_3_fu_700_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state11))) then
                tmp_25_reg_1072 <= tmp_25_fu_712_p1;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, tmp_s_fu_317_p2, ap_CS_fsm_state5, tmp_21_1_fu_442_p2, ap_CS_fsm_state8, tmp_21_2_fu_579_p2, ap_CS_fsm_state11, tmp_21_3_fu_700_p2, ap_CS_fsm_state4, ap_CS_fsm_state7, ap_CS_fsm_state10, ap_CS_fsm_state13, tmp_4_fu_366_p2, tmp_27_1_fu_497_p2, tmp_27_2_fu_634_p2, tmp_27_3_fu_771_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((tmp_s_fu_317_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when ap_ST_fsm_state4 => 
                if (((tmp_4_fu_366_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state5 => 
                if (((tmp_21_1_fu_442_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state7 => 
                if (((tmp_27_1_fu_497_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state8 => 
                if (((tmp_21_2_fu_579_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state10 => 
                if (((tmp_27_2_fu_634_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when ap_ST_fsm_state11 => 
                if (((tmp_21_3_fu_700_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state11))) then
                    ap_NS_fsm <= ap_ST_fsm_state13;
                else
                    ap_NS_fsm <= ap_ST_fsm_state12;
                end if;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state13 => 
                if (((tmp_27_3_fu_771_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state13))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state13;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state13, tmp_27_3_fu_771_p2)
    begin
        if ((((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((tmp_27_3_fu_771_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state13)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state13, tmp_27_3_fu_771_p2)
    begin
        if (((tmp_27_3_fu_771_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    grp_coef_mult_int_fu_261_a_0_read_assign_proc : process(ap_CS_fsm_state2, tmp_s_fu_317_p2, ap_CS_fsm_state5, tmp_21_1_fu_442_p2, ap_CS_fsm_state8, tmp_21_2_fu_579_p2, ap_CS_fsm_state11, tmp_21_3_fu_700_p2, col_3_fu_40, col_3_5_fu_56, col_3_10_fu_72, col_3_15_fu_88)
    begin
        if (((tmp_21_3_fu_700_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state11))) then 
            grp_coef_mult_int_fu_261_a_0_read <= col_3_15_fu_88;
        elsif (((tmp_21_2_fu_579_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            grp_coef_mult_int_fu_261_a_0_read <= col_3_10_fu_72;
        elsif (((tmp_21_1_fu_442_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            grp_coef_mult_int_fu_261_a_0_read <= col_3_5_fu_56;
        elsif (((tmp_s_fu_317_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            grp_coef_mult_int_fu_261_a_0_read <= col_3_fu_40;
        else 
            grp_coef_mult_int_fu_261_a_0_read <= "XXXXXXXX";
        end if; 
    end process;


    grp_coef_mult_int_fu_261_a_1_read_assign_proc : process(ap_CS_fsm_state2, tmp_s_fu_317_p2, ap_CS_fsm_state5, tmp_21_1_fu_442_p2, ap_CS_fsm_state8, tmp_21_2_fu_579_p2, ap_CS_fsm_state11, tmp_21_3_fu_700_p2, col_3_1_fu_44, col_3_6_fu_60, col_3_11_fu_76, col_3_16_fu_92)
    begin
        if (((tmp_21_3_fu_700_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state11))) then 
            grp_coef_mult_int_fu_261_a_1_read <= col_3_16_fu_92;
        elsif (((tmp_21_2_fu_579_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            grp_coef_mult_int_fu_261_a_1_read <= col_3_11_fu_76;
        elsif (((tmp_21_1_fu_442_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            grp_coef_mult_int_fu_261_a_1_read <= col_3_6_fu_60;
        elsif (((tmp_s_fu_317_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            grp_coef_mult_int_fu_261_a_1_read <= col_3_1_fu_44;
        else 
            grp_coef_mult_int_fu_261_a_1_read <= "XXXXXXXX";
        end if; 
    end process;


    grp_coef_mult_int_fu_261_a_2_read_assign_proc : process(ap_CS_fsm_state2, tmp_s_fu_317_p2, ap_CS_fsm_state5, tmp_21_1_fu_442_p2, ap_CS_fsm_state8, tmp_21_2_fu_579_p2, ap_CS_fsm_state11, tmp_21_3_fu_700_p2, col_3_2_fu_48, col_3_7_fu_64, col_3_12_fu_80, col_3_17_fu_96)
    begin
        if (((tmp_21_3_fu_700_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state11))) then 
            grp_coef_mult_int_fu_261_a_2_read <= col_3_17_fu_96;
        elsif (((tmp_21_2_fu_579_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            grp_coef_mult_int_fu_261_a_2_read <= col_3_12_fu_80;
        elsif (((tmp_21_1_fu_442_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            grp_coef_mult_int_fu_261_a_2_read <= col_3_7_fu_64;
        elsif (((tmp_s_fu_317_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            grp_coef_mult_int_fu_261_a_2_read <= col_3_2_fu_48;
        else 
            grp_coef_mult_int_fu_261_a_2_read <= "XXXXXXXX";
        end if; 
    end process;


    grp_coef_mult_int_fu_261_a_3_read_assign_proc : process(ap_CS_fsm_state2, tmp_s_fu_317_p2, ap_CS_fsm_state5, tmp_21_1_fu_442_p2, ap_CS_fsm_state8, tmp_21_2_fu_579_p2, ap_CS_fsm_state11, tmp_21_3_fu_700_p2, col_3_3_fu_52, col_3_8_fu_68, col_3_13_fu_84, col_3_18_fu_100)
    begin
        if (((tmp_21_3_fu_700_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state11))) then 
            grp_coef_mult_int_fu_261_a_3_read <= col_3_18_fu_100;
        elsif (((tmp_21_2_fu_579_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            grp_coef_mult_int_fu_261_a_3_read <= col_3_13_fu_84;
        elsif (((tmp_21_1_fu_442_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            grp_coef_mult_int_fu_261_a_3_read <= col_3_8_fu_68;
        elsif (((tmp_s_fu_317_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            grp_coef_mult_int_fu_261_a_3_read <= col_3_3_fu_52;
        else 
            grp_coef_mult_int_fu_261_a_3_read <= "XXXXXXXX";
        end if; 
    end process;

    i_2_1_fu_448_p2 <= std_logic_vector(unsigned(i_s_reg_195) + unsigned(ap_const_lv3_1));
    i_2_2_fu_585_p2 <= std_logic_vector(unsigned(i_4_reg_217) + unsigned(ap_const_lv3_1));
    i_2_3_fu_706_p2 <= std_logic_vector(unsigned(i_5_reg_239) + unsigned(ap_const_lv3_1));
    i_2_fu_323_p2 <= std_logic_vector(unsigned(i_reg_173) + unsigned(ap_const_lv3_1));
    i_3_1_fu_503_p2 <= std_logic_vector(unsigned(i_1_1_reg_206) + unsigned(ap_const_lv3_1));
    i_3_2_fu_640_p2 <= std_logic_vector(unsigned(i_1_2_reg_228) + unsigned(ap_const_lv3_1));
    i_3_3_fu_777_p2 <= std_logic_vector(unsigned(i_1_3_reg_250) + unsigned(ap_const_lv3_1));
    i_3_fu_372_p2 <= std_logic_vector(unsigned(i_1_reg_184) + unsigned(ap_const_lv3_1));

    state_address0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state5, ap_CS_fsm_state8, ap_CS_fsm_state11, ap_CS_fsm_state4, ap_CS_fsm_state7, ap_CS_fsm_state10, ap_CS_fsm_state13, tmp_3_fu_341_p1, tmp_6_fu_405_p1, tmp_25_1_fu_472_p1, tmp_32_1_fu_542_p1, tmp_25_2_fu_609_p1, tmp_32_2_fu_679_p1, tmp_25_3_fu_730_p1, tmp_32_3_fu_816_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            state_address0 <= tmp_32_3_fu_816_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            state_address0 <= tmp_25_3_fu_730_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            state_address0 <= tmp_32_2_fu_679_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            state_address0 <= tmp_25_2_fu_609_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            state_address0 <= tmp_32_1_fu_542_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            state_address0 <= tmp_25_1_fu_472_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            state_address0 <= tmp_6_fu_405_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            state_address0 <= tmp_3_fu_341_p1(4 - 1 downto 0);
        else 
            state_address0 <= "XXXX";
        end if; 
    end process;


    state_ce0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state5, ap_CS_fsm_state8, ap_CS_fsm_state11, ap_CS_fsm_state4, ap_CS_fsm_state7, ap_CS_fsm_state10, ap_CS_fsm_state13)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            state_ce0 <= ap_const_logic_1;
        else 
            state_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    state_d0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state7, ap_CS_fsm_state10, ap_CS_fsm_state13, tmp_7_fu_382_p6, tmp_8_fu_513_p6, tmp_10_fu_650_p6, tmp_13_fu_787_p6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            state_d0 <= tmp_13_fu_787_p6;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            state_d0 <= tmp_10_fu_650_p6;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            state_d0 <= tmp_8_fu_513_p6;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            state_d0 <= tmp_7_fu_382_p6;
        else 
            state_d0 <= "XXXXXXXX";
        end if; 
    end process;


    state_we0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state7, ap_CS_fsm_state10, ap_CS_fsm_state13, tmp_4_fu_366_p2, tmp_27_1_fu_497_p2, tmp_27_2_fu_634_p2, tmp_27_3_fu_771_p2)
    begin
        if ((((tmp_27_3_fu_771_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state13)) or ((tmp_27_2_fu_634_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state10)) or ((tmp_27_1_fu_497_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7)) or ((tmp_4_fu_366_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4)))) then 
            state_we0 <= ap_const_logic_1;
        else 
            state_we0 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_19_fu_329_p1 <= i_reg_173(2 - 1 downto 0);
    tmp_20_fu_378_p1 <= i_1_reg_184(2 - 1 downto 0);
    tmp_21_1_fu_442_p2 <= "1" when (i_s_reg_195 = ap_const_lv3_4) else "0";
    tmp_21_2_fu_579_p2 <= "1" when (i_4_reg_217 = ap_const_lv3_4) else "0";
    tmp_21_3_fu_700_p2 <= "1" when (i_5_reg_239 = ap_const_lv3_4) else "0";
    tmp_21_fu_454_p1 <= i_s_reg_195(2 - 1 downto 0);
    tmp_22_fu_509_p1 <= i_1_1_reg_206(2 - 1 downto 0);
    tmp_23_1_fu_458_p3 <= (tmp_21_fu_454_p1 & ap_const_lv2_0);
    tmp_23_2_fu_595_p3 <= (tmp_23_fu_591_p1 & ap_const_lv2_0);
    tmp_23_3_fu_716_p3 <= (tmp_25_fu_712_p1 & ap_const_lv2_0);
    tmp_23_fu_591_p1 <= i_4_reg_217(2 - 1 downto 0);
    tmp_24_1_fu_603_p2 <= (tmp_23_2_fu_595_p3 or ap_const_lv4_2);
    tmp_24_2_fu_724_p2 <= (tmp_23_3_fu_716_p3 or ap_const_lv4_3);
    tmp_24_fu_646_p1 <= i_1_2_reg_228(2 - 1 downto 0);
    tmp_24_s_fu_466_p2 <= (tmp_23_1_fu_458_p3 or ap_const_lv4_1);
    tmp_25_1_fu_472_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_24_s_fu_466_p2),64));
    tmp_25_2_fu_609_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_24_1_fu_603_p2),64));
    tmp_25_3_fu_730_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_24_2_fu_724_p2),64));
    tmp_25_fu_712_p1 <= i_5_reg_239(2 - 1 downto 0);
    tmp_26_fu_783_p1 <= i_1_3_reg_250(2 - 1 downto 0);
    tmp_27_1_fu_497_p2 <= "1" when (i_1_1_reg_206 = ap_const_lv3_4) else "0";
    tmp_27_2_fu_634_p2 <= "1" when (i_1_2_reg_228 = ap_const_lv3_4) else "0";
    tmp_27_3_fu_771_p2 <= "1" when (i_1_3_reg_250 = ap_const_lv3_4) else "0";
    tmp_2_fu_333_p3 <= (tmp_19_fu_329_p1 & ap_const_lv2_0);
    tmp_30_1_fu_528_p3 <= (tmp_22_fu_509_p1 & ap_const_lv2_0);
    tmp_30_2_fu_665_p3 <= (tmp_24_fu_646_p1 & ap_const_lv2_0);
    tmp_30_3_fu_802_p3 <= (tmp_26_fu_783_p1 & ap_const_lv2_0);
    tmp_31_1_fu_673_p2 <= (tmp_30_2_fu_665_p3 or ap_const_lv4_2);
    tmp_31_2_fu_810_p2 <= (tmp_30_3_fu_802_p3 or ap_const_lv4_3);
    tmp_31_s_fu_536_p2 <= (tmp_30_1_fu_528_p3 or ap_const_lv4_1);
    tmp_32_1_fu_542_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_31_s_fu_536_p2),64));
    tmp_32_2_fu_679_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_31_1_fu_673_p2),64));
    tmp_32_3_fu_816_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_31_2_fu_810_p2),64));
    tmp_3_fu_341_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_2_fu_333_p3),64));
    tmp_4_fu_366_p2 <= "1" when (i_1_reg_184 = ap_const_lv3_4) else "0";
    tmp_5_fu_397_p3 <= (tmp_20_fu_378_p1 & ap_const_lv2_0);
    tmp_6_fu_405_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_5_fu_397_p3),64));
    tmp_s_fu_317_p2 <= "1" when (i_reg_173 = ap_const_lv3_4) else "0";
end behav;
