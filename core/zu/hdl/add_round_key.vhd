-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.3
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity add_round_key is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    state_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    state_ce0 : OUT STD_LOGIC;
    state_we0 : OUT STD_LOGIC;
    state_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    state_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    state_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
    state_ce1 : OUT STD_LOGIC;
    state_we1 : OUT STD_LOGIC;
    state_d1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    state_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
    w_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    w_ce0 : OUT STD_LOGIC;
    w_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    r : IN STD_LOGIC_VECTOR (4 downto 0) );
end;


architecture behav of add_round_key is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (5 downto 0) := "000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (5 downto 0) := "000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (5 downto 0) := "001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (5 downto 0) := "010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv8_2 : STD_LOGIC_VECTOR (7 downto 0) := "00000010";
    constant ap_const_lv8_3 : STD_LOGIC_VECTOR (7 downto 0) := "00000011";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal c_1_fu_151_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal c_1_reg_267 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tmp_50_fu_164_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_50_reg_272 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_s_fu_145_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_53_fu_174_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_53_reg_279 : STD_LOGIC_VECTOR (2 downto 0);
    signal state_addr_11_reg_284 : STD_LOGIC_VECTOR (3 downto 0);
    signal state_addr_reg_295 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal grp_fu_138_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_52_reg_306 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal state_addr_12_reg_311 : STD_LOGIC_VECTOR (3 downto 0);
    signal state_addr_13_reg_322 : STD_LOGIC_VECTOR (3 downto 0);
    signal state_load_3_reg_328 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal c_reg_126 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal tmp_54_fu_180_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_56_fu_191_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_48_fu_196_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_51_fu_201_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_59_fu_213_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_61_fu_223_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_63_fu_231_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_65_fu_248_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_66_fu_253_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_49_fu_161_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_fu_157_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_55_fu_185_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_58_fu_205_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_60_fu_218_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_77_cast3_fu_228_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_64_fu_243_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (5 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    c_reg_126_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                c_reg_126 <= c_1_reg_267;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                c_reg_126 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                c_1_reg_267 <= c_1_fu_151_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_s_fu_145_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    state_addr_11_reg_284(2 downto 0) <= tmp_54_fu_180_p1(4 - 1 downto 0)(2 downto 0);
                    tmp_50_reg_272(7 downto 2) <= tmp_50_fu_164_p4(7 downto 2);
                tmp_53_reg_279 <= tmp_53_fu_174_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                    state_addr_12_reg_311(2 downto 0) <= tmp_59_fu_213_p1(4 - 1 downto 0)(2 downto 0);
                state_addr_13_reg_322 <= tmp_63_fu_231_p1(4 - 1 downto 0);
                tmp_52_reg_306 <= grp_fu_138_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                    state_addr_reg_295(2 downto 0) <= tmp_48_fu_196_p1(4 - 1 downto 0)(2 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                state_load_3_reg_328 <= state_q0;
            end if;
        end if;
    end process;
    tmp_50_reg_272(1 downto 0) <= "00";
    state_addr_11_reg_284(3) <= '0';
    state_addr_reg_295(3) <= '0';
    state_addr_12_reg_311(3) <= '1';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, tmp_s_fu_145_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((tmp_s_fu_145_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when others =>  
                ap_NS_fsm <= "XXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, tmp_s_fu_145_p2)
    begin
        if ((((tmp_s_fu_145_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, tmp_s_fu_145_p2)
    begin
        if (((tmp_s_fu_145_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    c_1_fu_151_p2 <= std_logic_vector(unsigned(c_reg_126) + unsigned(ap_const_lv3_1));
    grp_fu_138_p2 <= (w_q0 xor state_q0);

    state_address0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, state_addr_12_reg_311, ap_CS_fsm_state5, tmp_54_fu_180_p1, tmp_48_fu_196_p1, tmp_63_fu_231_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            state_address0 <= state_addr_12_reg_311;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            state_address0 <= tmp_63_fu_231_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            state_address0 <= tmp_48_fu_196_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            state_address0 <= tmp_54_fu_180_p1(4 - 1 downto 0);
        else 
            state_address0 <= "XXXX";
        end if; 
    end process;


    state_address1_assign_proc : process(state_addr_11_reg_284, state_addr_reg_295, ap_CS_fsm_state3, ap_CS_fsm_state4, state_addr_13_reg_322, ap_CS_fsm_state5, ap_CS_fsm_state6, tmp_59_fu_213_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            state_address1 <= state_addr_13_reg_322;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            state_address1 <= state_addr_reg_295;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            state_address1 <= tmp_59_fu_213_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            state_address1 <= state_addr_11_reg_284;
        else 
            state_address1 <= "XXXX";
        end if; 
    end process;


    state_ce0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            state_ce0 <= ap_const_logic_1;
        else 
            state_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    state_ce1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            state_ce1 <= ap_const_logic_1;
        else 
            state_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    state_d0 <= (w_q0 xor state_q1);

    state_d1_assign_proc : process(ap_CS_fsm_state3, grp_fu_138_p2, tmp_52_reg_306, ap_CS_fsm_state5, ap_CS_fsm_state6, tmp_66_fu_253_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            state_d1 <= tmp_66_fu_253_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            state_d1 <= tmp_52_reg_306;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            state_d1 <= grp_fu_138_p2;
        else 
            state_d1 <= "XXXXXXXX";
        end if; 
    end process;


    state_we0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            state_we0 <= ap_const_logic_1;
        else 
            state_we0 <= ap_const_logic_0;
        end if; 
    end process;


    state_we1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state5, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            state_we1 <= ap_const_logic_1;
        else 
            state_we1 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_48_fu_196_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(c_reg_126),64));
    tmp_49_fu_161_p1 <= r(4 - 1 downto 0);
    tmp_50_fu_164_p4 <= ((tmp_49_fu_161_p1 & tmp_fu_157_p1) & ap_const_lv2_0);
    tmp_51_fu_201_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_50_reg_272),64));
    tmp_53_fu_174_p2 <= (c_reg_126 xor ap_const_lv3_4);
    tmp_54_fu_180_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_53_fu_174_p2),64));
    tmp_55_fu_185_p2 <= (tmp_50_fu_164_p4 or ap_const_lv8_1);
    tmp_56_fu_191_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_55_fu_185_p2),64));
    tmp_58_fu_205_p3 <= (ap_const_lv1_1 & c_reg_126);
    tmp_59_fu_213_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_58_fu_205_p3),64));
    tmp_60_fu_218_p2 <= (tmp_50_reg_272 or ap_const_lv8_2);
    tmp_61_fu_223_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_60_fu_218_p2),64));
    tmp_63_fu_231_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_77_cast3_fu_228_p1),64));
    tmp_64_fu_243_p2 <= (tmp_50_reg_272 or ap_const_lv8_3);
    tmp_65_fu_248_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_64_fu_243_p2),64));
    tmp_66_fu_253_p2 <= (w_q0 xor state_load_3_reg_328);
        tmp_77_cast3_fu_228_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_53_reg_279),4));

    tmp_fu_157_p1 <= c_reg_126(2 - 1 downto 0);
    tmp_s_fu_145_p2 <= "1" when (c_reg_126 = ap_const_lv3_4) else "0";

    w_address0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, tmp_56_fu_191_p1, tmp_51_fu_201_p1, tmp_61_fu_223_p1, tmp_65_fu_248_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            w_address0 <= tmp_65_fu_248_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            w_address0 <= tmp_61_fu_223_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            w_address0 <= tmp_51_fu_201_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            w_address0 <= tmp_56_fu_191_p1(8 - 1 downto 0);
        else 
            w_address0 <= "XXXXXXXX";
        end if; 
    end process;


    w_ce0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            w_ce0 <= ap_const_logic_1;
        else 
            w_ce0 <= ap_const_logic_0;
        end if; 
    end process;

end behav;
