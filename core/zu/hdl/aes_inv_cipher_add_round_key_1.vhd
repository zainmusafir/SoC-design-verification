-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Version: 2020.2
-- Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity aes_inv_cipher_add_round_key_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    w_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    w_ce0 : OUT STD_LOGIC;
    w_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    w_address1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    w_ce1 : OUT STD_LOGIC;
    w_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
    state_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    state_ce0 : OUT STD_LOGIC;
    state_we0 : OUT STD_LOGIC;
    state_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    state_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    state_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
    state_ce1 : OUT STD_LOGIC;
    state_we1 : OUT STD_LOGIC;
    state_d1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    state_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
    r : IN STD_LOGIC_VECTOR (3 downto 0) );
end;


architecture behav of aes_inv_cipher_add_round_key_1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (4 downto 0) := "01000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv8_2 : STD_LOGIC_VECTOR (7 downto 0) := "00000010";
    constant ap_const_lv8_3 : STD_LOGIC_VECTOR (7 downto 0) := "00000011";
    constant ap_const_boolean_1 : BOOLEAN := true;

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal reg_148 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal add_ln211_fu_152_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln211_reg_282 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal state_addr_reg_290 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln211_fu_163_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln_fu_173_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln_reg_296 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln213_1_fu_182_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal xor_ln213_1_reg_303 : STD_LOGIC_VECTOR (2 downto 0);
    signal state_addr_20_reg_308 : STD_LOGIC_VECTOR (3 downto 0);
    signal state_addr_21_reg_323 : STD_LOGIC_VECTOR (3 downto 0);
    signal state_addr_22_reg_333 : STD_LOGIC_VECTOR (3 downto 0);
    signal c_reg_136 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal zext_ln211_fu_158_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln213_fu_188_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln213_1_fu_199_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln212_fu_204_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln214_fu_223_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln214_1_fu_240_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln215_fu_248_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln215_1_fu_258_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln213_fu_208_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln212_fu_228_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln215_fu_270_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln212_fu_169_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal or_ln213_fu_193_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln214_1_fu_215_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal or_ln214_fu_235_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal sext_ln215_fu_245_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal or_ln215_fu_253_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_ce_reg : STD_LOGIC;


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    c_reg_136_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                c_reg_136 <= ap_const_lv3_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                c_reg_136 <= add_ln211_reg_282;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                add_ln211_reg_282 <= add_ln211_fu_152_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln211_fu_163_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    add_ln_reg_296(7 downto 2) <= add_ln_fu_173_p4(7 downto 2);
                    state_addr_20_reg_308(2 downto 0) <= zext_ln213_fu_188_p1(4 - 1 downto 0)(2 downto 0);
                    state_addr_reg_290(2 downto 0) <= zext_ln211_fu_158_p1(4 - 1 downto 0)(2 downto 0);
                xor_ln213_1_reg_303 <= xor_ln213_1_fu_182_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then
                reg_148 <= state_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                    state_addr_21_reg_323(2 downto 0) <= zext_ln214_fu_223_p1(4 - 1 downto 0)(2 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                state_addr_22_reg_333 <= zext_ln215_fu_248_p1(4 - 1 downto 0);
            end if;
        end if;
    end process;
    state_addr_reg_290(3) <= '0';
    add_ln_reg_296(1 downto 0) <= "00";
    state_addr_20_reg_308(3) <= '0';
    state_addr_21_reg_323(3) <= '1';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln211_fu_163_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln211_fu_163_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when others =>  
                ap_NS_fsm <= "XXXXX";
        end case;
    end process;
    add_ln211_fu_152_p2 <= std_logic_vector(unsigned(c_reg_136) + unsigned(ap_const_lv3_1));
    add_ln_fu_173_p4 <= ((r & trunc_ln212_fu_169_p1) & ap_const_lv2_0);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln211_fu_163_p2)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0)) or ((icmp_ln211_fu_163_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, icmp_ln211_fu_163_p2)
    begin
        if (((icmp_ln211_fu_163_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln211_fu_163_p2 <= "1" when (c_reg_136 = ap_const_lv3_4) else "0";
    or_ln213_fu_193_p2 <= (ap_const_lv8_1 or add_ln_fu_173_p4);
    or_ln214_1_fu_215_p3 <= (ap_const_lv1_1 & c_reg_136);
    or_ln214_fu_235_p2 <= (ap_const_lv8_2 or add_ln_reg_296);
    or_ln215_fu_253_p2 <= (ap_const_lv8_3 or add_ln_reg_296);
        sext_ln215_fu_245_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(xor_ln213_1_reg_303),4));


    state_address0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state2, state_addr_reg_290, state_addr_20_reg_308, state_addr_22_reg_333, ap_CS_fsm_state5, zext_ln213_fu_188_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            state_address0 <= state_addr_22_reg_333;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            state_address0 <= state_addr_reg_290;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            state_address0 <= state_addr_20_reg_308;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            state_address0 <= zext_ln213_fu_188_p1(4 - 1 downto 0);
        else 
            state_address0 <= "XXXX";
        end if; 
    end process;


    state_address1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state2, state_addr_21_reg_323, ap_CS_fsm_state5, zext_ln211_fu_158_p1, zext_ln214_fu_223_p1, zext_ln215_fu_248_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            state_address1 <= state_addr_21_reg_323;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            state_address1 <= zext_ln215_fu_248_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            state_address1 <= zext_ln214_fu_223_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            state_address1 <= zext_ln211_fu_158_p1(4 - 1 downto 0);
        else 
            state_address1 <= "XXXX";
        end if; 
    end process;


    state_ce0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state2, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            state_ce0 <= ap_const_logic_1;
        else 
            state_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    state_ce1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state2, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            state_ce1 <= ap_const_logic_1;
        else 
            state_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    state_d0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, xor_ln213_fu_208_p2, xor_ln212_fu_228_p2, xor_ln215_fu_270_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            state_d0 <= xor_ln215_fu_270_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            state_d0 <= xor_ln212_fu_228_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            state_d0 <= xor_ln213_fu_208_p2;
        else 
            state_d0 <= "XXXXXXXX";
        end if; 
    end process;

    state_d1 <= (w_q1 xor reg_148);

    state_we0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            state_we0 <= ap_const_logic_1;
        else 
            state_we0 <= ap_const_logic_0;
        end if; 
    end process;


    state_we1_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            state_we1 <= ap_const_logic_1;
        else 
            state_we1 <= ap_const_logic_0;
        end if; 
    end process;

    trunc_ln212_fu_169_p1 <= c_reg_136(2 - 1 downto 0);

    w_address0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state2, zext_ln213_1_fu_199_p1, zext_ln212_fu_204_p1, zext_ln215_1_fu_258_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            w_address0 <= zext_ln215_1_fu_258_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            w_address0 <= zext_ln212_fu_204_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            w_address0 <= zext_ln213_1_fu_199_p1(8 - 1 downto 0);
        else 
            w_address0 <= "XXXXXXXX";
        end if; 
    end process;

    w_address1 <= zext_ln214_1_fu_240_p1(8 - 1 downto 0);

    w_ce0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            w_ce0 <= ap_const_logic_1;
        else 
            w_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    w_ce1_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            w_ce1 <= ap_const_logic_1;
        else 
            w_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    xor_ln212_fu_228_p2 <= (w_q0 xor reg_148);
    xor_ln213_1_fu_182_p2 <= (c_reg_136 xor ap_const_lv3_4);
    xor_ln213_fu_208_p2 <= (w_q0 xor state_q0);
    xor_ln215_fu_270_p2 <= (w_q0 xor state_q1);
    zext_ln211_fu_158_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(c_reg_136),64));
    zext_ln212_fu_204_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln_reg_296),64));
    zext_ln213_1_fu_199_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln213_fu_193_p2),64));
    zext_ln213_fu_188_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xor_ln213_1_fu_182_p2),64));
    zext_ln214_1_fu_240_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln214_fu_235_p2),64));
    zext_ln214_fu_223_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln214_1_fu_215_p3),64));
    zext_ln215_1_fu_258_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln215_fu_253_p2),64));
    zext_ln215_fu_248_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln215_fu_245_p1),64));
end behav;
