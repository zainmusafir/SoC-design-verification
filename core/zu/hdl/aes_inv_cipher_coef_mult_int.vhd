-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Version: 2020.2
-- Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity aes_inv_cipher_coef_mult_int is
port (
    ap_ready : OUT STD_LOGIC;
    p_read : IN STD_LOGIC_VECTOR (7 downto 0);
    p_read1 : IN STD_LOGIC_VECTOR (7 downto 0);
    p_read2 : IN STD_LOGIC_VECTOR (7 downto 0);
    p_read3 : IN STD_LOGIC_VECTOR (7 downto 0);
    ap_return_0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_2 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_3 : OUT STD_LOGIC_VECTOR (7 downto 0) );
end;


architecture behav of aes_inv_cipher_coef_mult_int is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv3_6 : STD_LOGIC_VECTOR (2 downto 0) := "110";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv3_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_lv3_3 : STD_LOGIC_VECTOR (2 downto 0) := "011";
    constant ap_const_logic_0 : STD_LOGIC := '0';

attribute shreg_extract : string;
    signal tmp_Multiply_fu_46_ap_ready : STD_LOGIC;
    signal tmp_Multiply_fu_46_ap_return : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_1_Multiply_fu_54_ap_ready : STD_LOGIC;
    signal tmp_1_Multiply_fu_54_ap_return : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_2_Multiply_fu_62_ap_ready : STD_LOGIC;
    signal tmp_2_Multiply_fu_62_ap_return : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_3_Multiply_fu_70_ap_ready : STD_LOGIC;
    signal tmp_3_Multiply_fu_70_ap_return : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_4_Multiply_fu_78_ap_ready : STD_LOGIC;
    signal tmp_4_Multiply_fu_78_ap_return : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_5_Multiply_fu_86_ap_ready : STD_LOGIC;
    signal tmp_5_Multiply_fu_86_ap_return : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_6_Multiply_fu_94_ap_ready : STD_LOGIC;
    signal tmp_6_Multiply_fu_94_ap_return : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_7_Multiply_fu_102_ap_ready : STD_LOGIC;
    signal tmp_7_Multiply_fu_102_ap_return : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_8_Multiply_fu_110_ap_ready : STD_LOGIC;
    signal tmp_8_Multiply_fu_110_ap_return : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_9_Multiply_fu_118_ap_ready : STD_LOGIC;
    signal tmp_9_Multiply_fu_118_ap_return : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_s_Multiply_fu_126_ap_ready : STD_LOGIC;
    signal tmp_s_Multiply_fu_126_ap_return : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_10_Multiply_fu_134_ap_ready : STD_LOGIC;
    signal tmp_10_Multiply_fu_134_ap_return : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_11_Multiply_fu_142_ap_ready : STD_LOGIC;
    signal tmp_11_Multiply_fu_142_ap_return : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_12_Multiply_fu_150_ap_ready : STD_LOGIC;
    signal tmp_12_Multiply_fu_150_ap_return : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_13_Multiply_fu_158_ap_ready : STD_LOGIC;
    signal tmp_13_Multiply_fu_158_ap_return : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_14_Multiply_fu_166_ap_ready : STD_LOGIC;
    signal tmp_14_Multiply_fu_166_ap_return : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln102_1_fu_180_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln102_fu_174_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln103_1_fu_198_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln103_fu_192_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln104_1_fu_216_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln104_fu_210_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln105_1_fu_234_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln105_fu_228_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln102_2_fu_186_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln103_2_fu_204_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln104_2_fu_222_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln105_2_fu_240_p2 : STD_LOGIC_VECTOR (7 downto 0);

    component aes_inv_cipher_Multiply IS
    port (
        ap_ready : OUT STD_LOGIC;
        x : IN STD_LOGIC_VECTOR (7 downto 0);
        y : IN STD_LOGIC_VECTOR (2 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;



begin
    tmp_Multiply_fu_46 : component aes_inv_cipher_Multiply
    port map (
        ap_ready => tmp_Multiply_fu_46_ap_ready,
        x => p_read,
        y => ap_const_lv3_6,
        ap_return => tmp_Multiply_fu_46_ap_return);

    tmp_1_Multiply_fu_54 : component aes_inv_cipher_Multiply
    port map (
        ap_ready => tmp_1_Multiply_fu_54_ap_ready,
        x => p_read3,
        y => ap_const_lv3_1,
        ap_return => tmp_1_Multiply_fu_54_ap_return);

    tmp_2_Multiply_fu_62 : component aes_inv_cipher_Multiply
    port map (
        ap_ready => tmp_2_Multiply_fu_62_ap_ready,
        x => p_read2,
        y => ap_const_lv3_5,
        ap_return => tmp_2_Multiply_fu_62_ap_return);

    tmp_3_Multiply_fu_70 : component aes_inv_cipher_Multiply
    port map (
        ap_ready => tmp_3_Multiply_fu_70_ap_ready,
        x => p_read1,
        y => ap_const_lv3_3,
        ap_return => tmp_3_Multiply_fu_70_ap_return);

    tmp_4_Multiply_fu_78 : component aes_inv_cipher_Multiply
    port map (
        ap_ready => tmp_4_Multiply_fu_78_ap_ready,
        x => p_read1,
        y => ap_const_lv3_6,
        ap_return => tmp_4_Multiply_fu_78_ap_return);

    tmp_5_Multiply_fu_86 : component aes_inv_cipher_Multiply
    port map (
        ap_ready => tmp_5_Multiply_fu_86_ap_ready,
        x => p_read,
        y => ap_const_lv3_1,
        ap_return => tmp_5_Multiply_fu_86_ap_return);

    tmp_6_Multiply_fu_94 : component aes_inv_cipher_Multiply
    port map (
        ap_ready => tmp_6_Multiply_fu_94_ap_ready,
        x => p_read3,
        y => ap_const_lv3_5,
        ap_return => tmp_6_Multiply_fu_94_ap_return);

    tmp_7_Multiply_fu_102 : component aes_inv_cipher_Multiply
    port map (
        ap_ready => tmp_7_Multiply_fu_102_ap_ready,
        x => p_read2,
        y => ap_const_lv3_3,
        ap_return => tmp_7_Multiply_fu_102_ap_return);

    tmp_8_Multiply_fu_110 : component aes_inv_cipher_Multiply
    port map (
        ap_ready => tmp_8_Multiply_fu_110_ap_ready,
        x => p_read2,
        y => ap_const_lv3_6,
        ap_return => tmp_8_Multiply_fu_110_ap_return);

    tmp_9_Multiply_fu_118 : component aes_inv_cipher_Multiply
    port map (
        ap_ready => tmp_9_Multiply_fu_118_ap_ready,
        x => p_read1,
        y => ap_const_lv3_1,
        ap_return => tmp_9_Multiply_fu_118_ap_return);

    tmp_s_Multiply_fu_126 : component aes_inv_cipher_Multiply
    port map (
        ap_ready => tmp_s_Multiply_fu_126_ap_ready,
        x => p_read,
        y => ap_const_lv3_5,
        ap_return => tmp_s_Multiply_fu_126_ap_return);

    tmp_10_Multiply_fu_134 : component aes_inv_cipher_Multiply
    port map (
        ap_ready => tmp_10_Multiply_fu_134_ap_ready,
        x => p_read3,
        y => ap_const_lv3_3,
        ap_return => tmp_10_Multiply_fu_134_ap_return);

    tmp_11_Multiply_fu_142 : component aes_inv_cipher_Multiply
    port map (
        ap_ready => tmp_11_Multiply_fu_142_ap_ready,
        x => p_read3,
        y => ap_const_lv3_6,
        ap_return => tmp_11_Multiply_fu_142_ap_return);

    tmp_12_Multiply_fu_150 : component aes_inv_cipher_Multiply
    port map (
        ap_ready => tmp_12_Multiply_fu_150_ap_ready,
        x => p_read2,
        y => ap_const_lv3_1,
        ap_return => tmp_12_Multiply_fu_150_ap_return);

    tmp_13_Multiply_fu_158 : component aes_inv_cipher_Multiply
    port map (
        ap_ready => tmp_13_Multiply_fu_158_ap_ready,
        x => p_read1,
        y => ap_const_lv3_5,
        ap_return => tmp_13_Multiply_fu_158_ap_return);

    tmp_14_Multiply_fu_166 : component aes_inv_cipher_Multiply
    port map (
        ap_ready => tmp_14_Multiply_fu_166_ap_ready,
        x => p_read,
        y => ap_const_lv3_3,
        ap_return => tmp_14_Multiply_fu_166_ap_return);




    ap_ready <= ap_const_logic_1;
    ap_return_0 <= xor_ln102_2_fu_186_p2;
    ap_return_1 <= xor_ln103_2_fu_204_p2;
    ap_return_2 <= xor_ln104_2_fu_222_p2;
    ap_return_3 <= xor_ln105_2_fu_240_p2;
    xor_ln102_1_fu_180_p2 <= (tmp_3_Multiply_fu_70_ap_return xor tmp_2_Multiply_fu_62_ap_return);
    xor_ln102_2_fu_186_p2 <= (xor_ln102_fu_174_p2 xor xor_ln102_1_fu_180_p2);
    xor_ln102_fu_174_p2 <= (tmp_Multiply_fu_46_ap_return xor tmp_1_Multiply_fu_54_ap_return);
    xor_ln103_1_fu_198_p2 <= (tmp_7_Multiply_fu_102_ap_return xor tmp_6_Multiply_fu_94_ap_return);
    xor_ln103_2_fu_204_p2 <= (xor_ln103_fu_192_p2 xor xor_ln103_1_fu_198_p2);
    xor_ln103_fu_192_p2 <= (tmp_5_Multiply_fu_86_ap_return xor tmp_4_Multiply_fu_78_ap_return);
    xor_ln104_1_fu_216_p2 <= (tmp_s_Multiply_fu_126_ap_return xor tmp_10_Multiply_fu_134_ap_return);
    xor_ln104_2_fu_222_p2 <= (xor_ln104_fu_210_p2 xor xor_ln104_1_fu_216_p2);
    xor_ln104_fu_210_p2 <= (tmp_9_Multiply_fu_118_ap_return xor tmp_8_Multiply_fu_110_ap_return);
    xor_ln105_1_fu_234_p2 <= (tmp_14_Multiply_fu_166_ap_return xor tmp_13_Multiply_fu_158_ap_return);
    xor_ln105_2_fu_240_p2 <= (xor_ln105_fu_228_p2 xor xor_ln105_1_fu_234_p2);
    xor_ln105_fu_228_p2 <= (tmp_12_Multiply_fu_150_ap_return xor tmp_11_Multiply_fu_142_ap_return);
end behav;
